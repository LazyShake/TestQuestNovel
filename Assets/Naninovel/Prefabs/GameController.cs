using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class GameController : MonoBehaviour
{
    public List<MemoryCard> cards; // –∫–∞—Ä—Ç–æ—á–∫–∏
    private MemoryCard firstRevealed;
    private MemoryCard secondRevealed;

    public float revealDelay = 1f;

    // üÜï UI —ç–ª–µ–º–µ–Ω—Ç—ã
    public GameObject gameOverPanel;
    public TextMeshProUGUI gameOverText;
    public Button continueButton;

    // üÜï –§–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–≤–æ–¥–∞
    private bool isInputBlocked = false;

    private void Start()
    {
        InitializeCards();
        // üÜï –ü–∞–Ω–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫—Ä—ã—Ç–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        if (gameOverPanel != null)
            gameOverPanel.SetActive(false);
    }

    void InitializeCards()
    {
        List<int> values = new List<int>();

        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã —á–∏—Å–µ–ª (8 –ø–∞—Ä –ø–æ 2)
        for (int i = 0; i < 8; i++)
        {
            values.Add(i);
            values.Add(i);
        }

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
        for (int i = 0; i < values.Count; i++)
        {
            int temp = values[i];
            int randomIndex = Random.Range(i, values.Count);
            values[i] = values[randomIndex];
            values[randomIndex] = temp;
        }

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º
        for (int i = 0; i < cards.Count; i++)
        {
            cards[i].Setup(values[i], this);
        }
    }

    public void CardRevealed(MemoryCard card)
    {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥, –µ—Å–ª–∏ –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—ã
        if (isInputBlocked) return;

        if (firstRevealed == null)
        {
            firstRevealed = card;
        }
        else if (secondRevealed == null)
        {
            secondRevealed = card;
            isInputBlocked = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            SetCardsInteractable(false); // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã
            StartCoroutine(CheckMatch());
        }
    }

    IEnumerator CheckMatch()
    {
        yield return new WaitForSeconds(revealDelay);

        if (firstRevealed.id == secondRevealed.id)
        {
            firstRevealed.Disable();
            secondRevealed.Disable();
        }
        else
        {
            firstRevealed.Hide();
            secondRevealed.Hide();
        }

        firstRevealed = null;
        secondRevealed = null;

        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥
        SetCardsInteractable(true);
        isInputBlocked = false;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        if (IsGameComplete())
        {
            Debug.Log("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
            ShowGameOver();
        }
        else
        {
            Debug.Log("–ü–∞—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–ª–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É.");
        }
    }

    void SetCardsInteractable(bool isInteractable)
    {
        foreach (var card in cards)
        {
            card.button.interactable = isInteractable;
        }
    }

    bool IsGameComplete()
    {
        foreach (var card in cards)
        {
            if (card.button.interactable)
                return false;
        }
        return true;
    }

    // üÜï –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    void ShowGameOver()
    {
        if (gameOverPanel != null)
        {
            gameOverText.text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –Ω–∞—à–ª–∏ –≤—Å–µ –ø–∞—Ä—ã!";
            gameOverPanel.SetActive(true);

            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
            continueButton.onClick.RemoveListener(OnContinueButtonClick);

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å
            continueButton.onClick.AddListener(OnContinueButtonClick);
        }
    }

    // üÜï –õ–æ–≥–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    void OnContinueButtonClick()
    {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é Naninovel-–∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é
        Debug.Log("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É –∏–ª–∏ –≤—ã–π—Ç–∏ –≤ –Ω–æ–≤–µ–ª–ª—É");

        // –°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        gameOverPanel.SetActive(false);

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é –∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏—é
        // SceneManager.LoadScene("NextScene");
    }
}
